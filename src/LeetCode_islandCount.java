import java.util.LinkedList;

class LeetCode_islandCount {

    public static void main(String[] args) {
        char[][] map = new char[][]{
                {
                '1',
        '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '0',
                '1',
                '1'
},
{
        '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0'
},
{
        '1',
                '0',
                '1',
                '1',
                '1',
                '0',
                '0',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '0',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1'
},
{
        '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '0',
                '1',
                '1',
                '1',
                '1',
                '0',
                '0'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
},
{
        '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1',
                '1'
}
        };
        numIslands(map);

    }

    static int n, m;

    public static int numIslands(char[][] grid) {
        n = grid.length;
        if (n == 0) {
            return 0;
        }

        m = grid[0].length;
        int islandCount = 0;
        int[][] islandGrid = new int[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '1' && islandGrid[i][j] == 0) {
                    System.out.println(i + " & " + j);
                    islandCount++;
                    bfs(grid, islandGrid, islandCount, i, j);
                }
            }
        }
        return islandCount;
    }

    static void bfs(char[][] grid, int[][] map, int count, int i, int j) {
        LinkedList<Pair> toVisit = new LinkedList<>();
        toVisit.add(new Pair(i, j));
        map[i][j] = count;

        while (!toVisit.isEmpty()) {

            Pair p = toVisit.poll();
            if (toVisit.stream().anyMatch(pair -> pair.x == p.x && pair.y == p.y)) {
                System.out.println("ERROR");
            }
            //Mark island
            map[p.x][p.y] = count;

            if (p.x + 1 < n && grid[p.x + 1][p.y] == '1' && map[p.x + 1][p.y] == 0) {
                Pair neighbour = new Pair(p.x + 1, p.y);
                map[p.x+1][p.y] = count;
                toVisit.add(neighbour);
            }
            if (p.x - 1 >= 0 && grid[p.x - 1][p.y] == '1' && map[p.x - 1][p.y] == 0) {
                Pair neighbour = new Pair(p.x - 1, p.y);
                map[p.x-1][p.y] = count;
                toVisit.add(neighbour);
            }
            if (p.y - 1 >= 0 && grid[p.x][p.y - 1] == '1' && map[p.x][p.y - 1] == 0) {
                Pair neighbour = new Pair(p.x, p.y - 1);
                map[p.x][p.y - 1] = count;

                toVisit.add(neighbour);
            }
            if (p.y + 1 < m && grid[p.x][p.y + 1] == '1' && map[p.x][p.y + 1] == 0) {
                Pair neighbour = new Pair(p.x, p.y + 1);
                map[p.x][p.y + 1] = count;

                toVisit.add(neighbour);
            }
        }
    }

    static class Pair {
        int x, y;

        Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }

    }
}